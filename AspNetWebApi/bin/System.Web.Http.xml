<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.Http</name>
    </assembly>
    <members>
        <member name="T:System.Web.Http.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or throw an <see cref="T:System.InvalidOperationException"/> 
            if either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <returns>An instance of type <typeparam name="T"/>.</returns>
        </member>
        <member name="M:System.Web.Http.DictionaryExtensions.GetOrAdd``1(System.Collections.Concurrent.ConcurrentDictionary{System.Object,System.Object},System.Object,System.Func{System.Object,``0})">
            <summary>
            Adds a key/value pair of type <typeparamref name="T"/> to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary{object, object}"/>
                if the key does not already exist.
            </summary>
            <typeparam name="T">The actual type of the dictionary value.</typeparam>
            <param name="concurrentPropertyBag">A dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="factory">The function used to generate a value for the <paramref name="key"/>.</param>
            <returns> The value for the key. This will be either the existing value for the <paramref name="key"/> if the key is already in the dictionary,
            or the new value for the key as returned by <paramref name="factory"/> if the key was not in the dictionary.</returns>
        </member>
        <member name="T:System.Web.Http.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:System.Web.Http.HttpMethodHelper">
            <summary>
            Various helper methods for the static members of <see cref="T:System.Net.Http.HttpMethod"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpMethodHelper.GetHttpMethod(System.String)">
            <summary>
            Gets the static <see cref="T:System.Net.Http.HttpMethod"/> instance for any given HTTP method name.
            </summary>
            <param name="method">The HTTP request method.</param>
            <returns>An existing static <see cref="T:System.Net.Http.HttpMethod"/> or a new instance if the method was not found.</returns>
        </member>
        <member name="T:System.Web.PrefixContainer">
            <summary>
            This is a container for prefix values. It normalizes all the values into dotted-form and then stores
            them in a sorted array. All queries for prefixes are also normalized to dotted-form, and searches
            for ContainsPrefix are done with a binary search.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors``1(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <summary>
            Returns a successful completed task with the given result.  
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially. It stops as soon
            as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>a task that signals completed when all the incoming tasks are finished.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially and collects the results.
            It stops as soon as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <returns>A task that, upon successful completion, returns the list of results.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <param name="action">action to run synchronouslyt</param>
            <param name="token">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <typeparam name="TResult">type of result that task will return.</typeparam>
            <param name="func">function to run synchronously and produce result</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Overload of RunSynchronously that avoids a call to Unwrap(). 
            This overload is useful when func() starts doing some synchronous work and then hits IO and 
            needs to create a task to finish the work. 
            </summary>
            <typeparam name="TResult">type of result that Task will return</typeparam>
            <param name="func">function that returns a task</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task, created by running func().</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.SetIfTaskFailed``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Update the completion source if the task failed (cancelled or faulted). No change to completion source if the task succeeded. 
            </summary>
            <typeparam name="TResult">result type of completion source</typeparam>
            <param name="tcs">completion source to update</param>
            <param name="source">task to update from.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task. If the task ran to completion and the result type doesn't match
            the type of the completion source, then a default value will be used. This is useful for converting Task into
            Task{AsyncVoid}, but it can also accidentally be used to introduce data loss (by passing the wrong
            task type), so please execute this method with care.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.CatchInfo,System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.CatchInfo{``0},System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task{``0}}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            Since this method consumes a task with no return value, you must provide the return value to be used
            when the inner task ran to successful completion.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It attempts to preserve the original
            stack trace when throwing the exception (which should always work in 4.5, and should also work in 4.0
            when running in full trust). Note: It is the caller's responsibility not to pass incomplete tasks to
            this method, because it does degenerate into a call to the equivalent of .Wait() on the task when it
            hasn't yet completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToAsyncVoidTask(System.Action)">
            <summary>
            Adapts any action into a Task (returning AsyncVoid, so that it's usable with Task{T} extension methods).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToTask``1(System.Threading.Tasks.Task,System.Threading.CancellationToken,``0)">
            <summary>
            Changes the return value of a task to the given result, if the task ends in the RanToCompletion state.
            This potentially imposes an extra ContinueWith to convert a non-completed task, so use this with caution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpersExtensions.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfoBase`1.Throw">
            <summary>
            Returns a CatchResult that re-throws the original exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.Exception">
            <summary>
            The exception that was thrown to cause the Catch block to execute.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.CatchInfoBase`1.CatchResult">
            <summary>
            Represents a result to be returned from a Catch handler.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.CatchResult.Task">
            <summary>
            Gets or sets the task to be returned to the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Handled">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Task(System.Threading.Tasks.Task)">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Handled(`0)">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
            <param name="returnValue">The return value of the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Task(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="T:System.Web.Http.Controllers.IActionResultConverter">
            <summary>
            A contract for a conversion routine that can take the result of an action returned from
            <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})"/>
            and convert it to an instance of <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpControllerConfigurationAttribute">
            <summary>
            Provides a mechanism for a <see cref="T:System.Web.Http.Controllers.IHttpController"/> implementation to indicate 
            what kind of <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>, <see cref="T:System.Web.Http.Controllers.IHttpActionSelector"/>, <see cref="T:System.Web.Http.Controllers.IActionValueBinder"/>
            and <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker"/> to use for that controller. The types are 
            first looked up in the <see cref="T:System.Web.Http.Services.DependencyResolver"/> and if not found there
            then created directly.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionContext">
            <summary>
            Contains information for the executing action.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
            <summary>
            Gets the current <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
            <summary>
            A converter for actions with a return type of <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
            <summary>
            A converter for creating responses from actions that return an arbitrary T value.
            </summary>
            <typeparam name="T">The declared return type of an action.</typeparam>
        </member>
        <member name="T:System.Web.Http.Controllers.VoidResultConverter">
            <summary>
            A converter for creating a response from actions that do not return a value.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/> with no external dependencies.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
            <summary>
            Provides an abstraction for managing the assemblies of an application. A different
            implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
            <summary>
            Returns a list of assemblies available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of assemblies.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.System#Web#Http#Dispatcher#IAssembliesResolver#GetAssemblies">
            <summary>
            Returns a list of assemblies available for the application.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> of assemblies.</returns>
        </member>
        <member name="T:System.Web.Http.Description.ApiDescription">
            <summary>
            Describes an API defined by relative URI path and HTTP method.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Description.ApiDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
            <summary>
            Gets or sets the HTTP method.
            </summary>
            <value>
            The HTTP method.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
            <summary>
            Gets or sets the relative path.
            </summary>
            <value>
            The relative path.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
            <summary>
            Gets or sets the action descriptor that will handle the API.
            </summary>
            <value>
            The action descriptor.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.Route">
            <summary>
            Gets or sets the registered route for the API.
            </summary>
            <value>
            The route.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
            <summary>
            Gets or sets the documentation of the API.
            </summary>
            <value>
            The documentation.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
            <summary>
            Gets the supported response formatters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
            <summary>
            Gets the supported request body formatters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
            <summary>
            Gets the parameter descriptions.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiDescription.ID">
            <summary>
            Gets the ID. The ID is unique within <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Description.ApiExplorer">
            <summary>
            Explores the URI space of the service based on routes, controllers and actions available in the system.
            </summary>
        </member>
        <member name="T:System.Web.Http.Description.IApiExplorer">
            <summary>
            Defines the interface for getting a collection of <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
            <summary>
            Gets the API descriptions.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Description.ApiExplorer"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
            <summary>
            Determines whether the controller should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="controllerVariableValue">The controller variable value from the route.</param>
            <param name="controllerDescriptor">The controller descriptor.</param>
            <param name="route">The route.</param>
            <returns><c>true</c> if the controller should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
            <summary>
            Determines whether the action should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="actionVariableValue">The action variable value from the route.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="route">The route.</param>
            <returns><c>true</c> if the action should be considered for <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/> generation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Gets a collection of HttpMethods supported by the action. Called when initializing the <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions"/>.
            </summary>
            <param name="route">The route.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>A collection of HttpMethods supported by the action.</returns>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
            <summary>
            Gets the API descriptions. The descriptions are initialized on the first access.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
            <summary>
            Gets or sets the documentation provider. The provider will be responsible for documenting the API.
            </summary>
            <value>
            The documentation provider.
            </value>
        </member>
        <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
            <summary>
            This attribute can be used on the controllers and actions to influence the behavior of <see cref="T:System.Web.Http.Description.ApiExplorer"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
            <summary>
            Gets or sets a value indicating whether to exclude the controller or action from the ApiDescriptions generated by <see cref="T:System.Web.Http.Description.ApiExplorer"/>.
            </summary>
            <value>
              <c>true</c> if the controller or action should be ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Web.Http.Description.ApiParameterDescription">
            <summary>
            Describes a parameter on the API defined by relative URI path and HTTP method.
            </summary>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
            <summary>
            Gets or sets the documentation.
            </summary>
            <value>
            The documentation.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
            <summary>
            Gets or sets the source of the parameter. It may come from the request URI, request body or other places.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
            <summary>
            Gets or sets the parameter descriptor.
            </summary>
            <value>
            The parameter descriptor.
            </value>
        </member>
        <member name="T:System.Web.Http.Description.ApiParameterSource">
            <summary>
            Describes where the parameter come from.
            </summary>
        </member>
        <member name="T:System.Web.Http.Description.IDocumentationProvider">
            <summary>
            Defines the provider responsible for documenting the service.
            </summary>
        </member>
        <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Gets the documentation based on <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>Documentation for the controller.</returns>
        </member>
        <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
            <summary>
            Gets the documentation based on <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor"/>.
            </summary>
            <param name="parameterDescriptor">The parameter descriptor.</param>
            <returns>Documentation for the controller.</returns>
        </member>
        <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
            <summary>
            Enum to indicate whether error details, such as exception messages and stack traces, should be included in error messages.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
            <summary>
            Only include error details when responding to a local request.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
            <summary>
            Always include error details.
            </summary>
        </member>
        <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
            <summary>
            Never include error details.
            </summary>
        </member>
        <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
            <summary>
            Gets the current <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Internal.UriQueryUtility">
            <summary>
            Helpers for encoding, decoding, and parsing URI query components.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
            <summary>
            Parameter binding that will read from the body and invoke the formatters. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
            <summary>
            Describes how a parameter is bound. The binding should be static (based purely on the descriptor) and 
            can be shared across requests. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
            <summary>
            Execute the binding for the given request.
            On success, this will add the parameter to the actionContext.ActionArguments dictionary.
            Caller ensures <see cref="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid"/> is true.
            </summary>
            <param name="metadataProvider">metadata provider to use for validation.</param>
            <param name="actionContext">action context for the binding. This contains the parameter dictionary that will get populated.</param>
            <param name="cancellationToken">Cancellation token for cancelling the binding operation. Or a binder can also bind a parameter to this.</param>
            <returns>Task that is signaled when the binding is complete. For simple bindings from a URI, this should be signalled immediately.
            For bindings that read the content body, this may do network IO.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
            <summary>
            True iff this binding owns the body. This is important since the body can be a stream that is only read once.
            This lets us know who is trying to read the body, and enforce that there is only one reader. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
            <summary>
            True if the binding was successful and ExecuteBinding can be called. 
            False if there was an error determining this binding. This means a developer error somewhere, such as 
            configuration, parameter types, proper attributes, etc. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
            <summary>
            Get an error message describing why this binding is invalid. 
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
            <summary>
            Bind directly to the cancellation token
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
            <summary>
            Describe a binding error.  This includes a message that can give meaningful information to a client.
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Deserialize the form data to the given type, using model binding.  
            </summary>
            <param name="formData">collection with parsed form url data</param>
            <param name="type">target type to read as</param>
            <param name="modelName">null or empty to read the entire form as a single object. This is common for body data. 
            <param name="requiredMemberSelector">The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector"/> used to determine required members.</param>
            <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger"/> to log events to.</param>
            Or the name of a model to do a partial binding against the form data. This is common for extracting individual fields.</param>
            <returns>best attempt to bind the object. The best attempt may be null.</returns>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionBinding">
            <summary>
            This describes *how* the binding will happen. Does not actually bind. 
            This is static for a given action descriptor and can be reused across requests. 
            This may be a nice thing to log. Or set a breakpoint after we create and preview what's about to happen. 
            In theory, this could be precompiled for each Action descriptor.  
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
            <summary>
            Back pointer to the action this binding is for. 
            This can also provide the Type[], string[] names for the parameters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
            <summary>
            Specifies synchronous bindings for each parameter.This is a parallel array to the ActionDescriptor's parameter array. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the described action and returns a <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will
            contain the return value of the action.
            </summary>
            <param name="controllerContext">The context.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will contain the return value of the action.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
            <summary>
            Returns the filters for the given configuration and action. The filter collection is ordered
            according to the FilterScope (in order from least specific to most specific: First, Global, Controller, Action).
            
            If a given filter disallows duplicates (AllowMultiple=False) then the most specific filter is maintained
            and less specific filters get removed (e.g. if there is a Authorize filter with a Controller scope and another
            one with an Action scope then the one with the Action scope will be maintained and the one with the Controller
            scope will be discarded).
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.Collection`1"/> of all filters associated with this <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
            <summary>
            The return type of the method or <c>null</c> if the method does not return a value (e.g. a method returning
            <c>void</c>).
            </summary>
            <remarks>
            This property should describe the type of the value contained by the result of executing the action
            via the <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
            <summary>
            Gets the converter for correctly transforming the result of calling
            <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})"/> into an instance of
            <see cref="T:System.Net.Http.HttpResponseMessage"/>. 
            </summary>
            <remarks>
            The behavior of the returned converter should align with the action's declared <see cref="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType"/>.
            </remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
            <summary>
            An action descriptor representing a reflected synchronous or asynchronous action method.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes the described action and returns a <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will
            contain the return value of the action.
            </summary>
            <param name="controllerContext">The context.</param>
            <param name="arguments">The arguments.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that once completed will contain the return value of the action.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.CacheAttrsIActionMethodSelector">
            <summary>
            Caches that the ActionSelector use.
            </summary>
        </member>
        <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
            <summary>
            The return type of the method or <c>null</c> if the method does not return a value (e.g. a method returning
            <c>void</c>).
            </summary>
            <remarks>
            This implementation returns the exact value of <see cref="P:System.Reflection.MethodInfo.ReturnType"/> for 
            synchronous methods and an unwrapped value for asynchronous methods (e.g. the <c>T</c> of <see cref="T:System.Threading.Tasks.Task`1"/>.
            This returns <c>null</c> for methods returning <c>void</c> or <see cref="T:System.Threading.Tasks.Task"/>.
            </remarks>
        </member>
        <member name="T:System.Web.Http.AllowAnonymousAttribute">
            <summary>
            Actions and controllers marked with this attribute are skipped by <see cref="T:System.Web.Http.AuthorizeAttribute"/> during authorization.
            </summary>
        </member>
        <member name="T:System.Web.Http.HttpResponseException">
            <summary>
            An exception that allows for a given <see cref="T:System.Net.Http.HttpResponseMessage"/>
            to be returned to the client.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpResponseException"/> class.
            </summary>
            <param name="response">The response message.</param>
        </member>
        <member name="P:System.Web.Http.HttpResponseException.Response">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpResponseMessage"/> to return to the client.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
            <summary>
            Parameter binds to the request
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
            <summary>
            Describes a parameter that gets bound via ModelBinding.  
            </summary>
        </member>
        <member name="T:System.Web.Http.Query.ServiceQueryPart">
            <summary>
            Represents a single query operator to be applied to a query
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.ServiceQueryPart.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.ServiceQueryPart.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="queryOperator">The query operator</param>
            <param name="expression">The query expression</param>
        </member>
        <member name="M:System.Web.Http.Query.ServiceQueryPart.ToString">
            <summary>
            Returns a string representation of this <see cref="T:System.Web.Http.Query.ServiceQueryPart"/>
            </summary>
            <returns>The string representation of this <see cref="T:System.Web.Http.Query.ServiceQueryPart"/></returns>
        </member>
        <member name="P:System.Web.Http.Query.ServiceQueryPart.QueryOperator">
            <summary>
            Gets or sets the query operator. Must be one of the supported operators : "where", "orderby", "skip", or "take".
            </summary>
        </member>
        <member name="P:System.Web.Http.Query.ServiceQueryPart.Expression">
            <summary>
            Gets or sets the query expression.
            </summary>
        </member>
        <member name="P:System.Web.Http.QueryableAttribute.ResultLimit">
            <summary>
            The maximum number of results that should be returned from this query regardless of query-specified limits. A value of <c>0</c>
            indicates no limit. Negative values are not supported and will cause a runtime exception.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
            <summary>
            Attempts to retrieve a strongly-typed value from a <paramref name="response"/>.
            </summary>
            <remarks>
            If <see cref="P:System.Net.Http.HttpResponseMessage.Content"/> is an instance of <see cref="T:System.Net.Http.ObjectContent"/>
            attempts to retrieve the <see cref="P:System.Net.Http.ObjectContent.Value"/> if it is compatible with <typeparamref name="T"/>.
            If it is it returns <c>true</c> and sets <paramref name="value"/>. If not it returns <c>false</c> and
            sets <paramref name="value"/> to the default instance of <typeparamref name="T"/>.
            </remarks>
            <typeparam name="T">The type of the value to retrieve.</typeparam>
            <param name="response">The response.</param>
            <param name="value">Will contain the retrieved value if this method succeeds.</param>
            <returns>Returns <c>true</c> if the response has a content with a value that can be cast to <typeparamref name="T"/>,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.HttpResponseMessageExtensions.EnsureResponseHasRequest(System.Net.Http.HttpResponseMessage,System.Net.Http.HttpRequestMessage)">
            <summary>
            Attaches the given <paramref name="request"/> to the <paramref name="response"/> if the response does not already
            have a pointer to a request.
            </summary>
            <param name="response">The response.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
            <summary>
            Default implementation of an <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            A different implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.   
            We optimize for the case where we have an <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker"/> 
            instance per <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instance but can support cases where there are
            many <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instances for one <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker"/> 
            as well. In the latter case the lookup is slightly slower because it goes through the 
            <see cref="P:HttpControllerDescriptor.Properties"/> dictionary.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
            <summary>
            Defines the methods that are required for an <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
            <summary>
            Creates the <see cref="T:System.Web.Http.Controllers.IHttpController"/> specified by <paramref name="controllerType"/> using the given <paramref name="request"/>
            </summary>
            <param name="request">The request message.</param>
            <param name="controllerType">Type of the controller.</param>
            <param name="controllerDescriptor">The controller descriptor</param>
            <returns>An instance of type <paramref name="controllerType"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Release(System.Web.Http.Controllers.IHttpController,System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Releases the <paramref name="controller"/> instance 
            </summary>
            <param name="controllerContext">The <see cref="T:System.Web.Http.Controllers.HttpControllerContext"/> containing </param>
            <param name="controller">The <see cref="T:System.Web.Http.Controllers.IHttpController"/> that is to be released</param>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
            <summary>
            Creates a controller instance for the given <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="request">The request message</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.ReleaseController(System.Web.Http.Controllers.IHttpController,System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Releases an <see cref="T:System.Web.Http.Controllers.IHttpController"/> instance.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
            <summary>
            Returns the collection of <see cref="T:System.Web.Http.Filters.IFilter">filters</see> associated with this descriptor's controller.
            </summary>
            <remarks>The default implementation calls <see cref="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1"/>.</remarks>
            <returns>A collection of filters associated with this controller.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
            <summary>
            Returns a collection of attributes that can be assigned to <typeparamref name="T"/> for this descriptor's controller.
            </summary>
            <remarks>The default implementation retrieves the matching set of attributes declared on <see cref="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType"/>.</remarks>
            <typeparam name="T">Used to filter the collection of attributes. Use a value of <see cref="T:System.Object"/> to retrieve all attributes.</typeparam>
            <returns>A collection of attributes associated with this controller.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetService``1(System.Web.Http.HttpConfiguration,System.Type)">
            <summary>
            Helper for looking up or activating <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>, <see cref="T:System.Web.Http.Controllers.IHttpActionSelector"/>, 
            and <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker"/>. Note that we here use the slow <see cref="M:Activator.CreateInstance"/>
            as the instances live for the lifetime of the <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instance itself so there is
            little benefit in caching a delegate.
            </summary>
            <typeparam name="TBase">The type of the base.</typeparam>
            <param name="configuration">The configuration.</param>
            <param name="serviceType">Type of the service.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpRouteCollection"/> class with a <see cref="M:VirtualPathRoot"/>
            value of "/".
            </summary>
        </member>
        <member name="T:System.Web.Http.AuthorizeAttribute">
            <summary>
            An authorization filter that verifies the request's <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <remarks>You can declare multiple of these attributes per action. You can also use <see cref="T:System.Web.Http.AllowAnonymousAttribute"/>
            to disable authorization for a specific action.</remarks>
            <seealso cref="M:AuthorizeCore"/>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.AuthorizeCore">
            <summary>
            Determines whether access for this particular request is authorized. This method uses the user <see cref="T:System.Security.Principal.IPrincipal"/>
            returned via <see cref="P:System.Threading.Thread.CurrentPrincipal"/>. Authorization is denied if the user is not authenticated,
            the user is not in the authorized group of <see cref="P:Users"/> (if defined), or if the user is not in any of the authorized 
            <see cref="P:Roles"/> (if defined).
            </summary>
            <returns><c>true</c> if access is authorized; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Called when an action is being authorized. This method uses the user <see cref="T:System.Security.Principal.IPrincipal"/>
            returned via <see cref="M:HttpRequestMessageExtensions.GetUserPrincipal"/>. Authorization is denied if
            - the request is not associated with any user.
            - the user is not authenticated,
            - the user is authenticated but is not in the authorized group of <see cref="P:Users"/> (if defined), or if the user
            is not in any of the authorized <see cref="P:Roles"/> (if defined).
            
            If authorization is denied then this method will invoke <see cref="M:HandleUnauthorizedRequest"/> to process the unauthorized request.
            </summary>
            <remarks>You can use <see cref="T:System.Web.Http.AllowAnonymousAttribute"/> to cause authorization checks to be skipped for a particular
            action or controller.</remarks>
            <param name="actionContext">The context.</param>
            <exception cref="T:System.ArgumentNullException">The context parameter is null.</exception>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Processes requests that fail authorization. This default implementation creates a new response with the
            Unauthorized status code. Override this method to provide your own handling for unauthorized requests.
            </summary>
            <param name="actionContext">The context.</param>
        </member>
        <member name="M:System.Web.Http.AuthorizeAttribute.SplitString(System.String)">
            <summary>
            Splits the string on commas and removes any leading/trailing whitespace from each result item.
            </summary>
            <param name="original">The input string.</param>
            <returns>An array of strings parsed from the input <paramref name="original"/> string.</returns>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
            <summary>
            Gets or sets the authorized roles.
            </summary>
            <value>
            The roles string.
            </value>
            <remarks>Multiple role names can be specified using the comma character as a separator.</remarks>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
            <summary>
            Gets a unique identifier for this <see cref="T:System.Attribute"/>.
            </summary>
            <returns>The unique identifier for the attribute.</returns>
        </member>
        <member name="P:System.Web.Http.AuthorizeAttribute.Users">
            <summary>
            Gets or sets the authorized users.
            </summary>
            <value>
            The users string.
            </value>
            <remarks>Multiple role names can be specified using the comma character as a separator.</remarks>
        </member>
        <member name="T:System.Web.Http.HttpRequestMessageExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Net.Http.HttpRequestMessage"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/> for the given request.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Web.Http.HttpConfiguration"/>.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Threading.SynchronizationContext"/> for the given request or null if not available.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Threading.SynchronizationContext"/> or null.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for the given request or null if not available.
            </summary>
            <param name="request">The HTTP request.</param>
            <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> or null.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an instance
            of <see cref="T:System.Net.Http.ObjectContent`1"/> as the content if a formatter can be found. If no formatter is found that this
            method returns a response with status 406 NotAcceptable. This forwards the call to
            <see cref="M:System.Web.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)"/> with a <c>null</c>
            configuration.
            </summary>
            <remarks>
            This method requires that <paramref name="request"/> has been associated with an instance of
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
            <summary>
            Helper method that performs content negotiation and creates a <see cref="T:System.Net.Http.HttpResponseMessage"/> with an instance
            of <see cref="T:System.Net.Http.ObjectContent`1"/> as the content if a formatter can be found. If no formatter is found that this
            method returns a response with status 406 NotAcceptable.
            </summary>
            <remarks>
            This method will use the provided <paramref name="configuration"/> or it will get the 
            <see cref="T:System.Web.Http.HttpConfiguration"/> instance associated with <paramref name="request"/>.
            </remarks>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="request">The request.</param>
            <param name="statusCode">The status code of the created response.</param>
            <param name="value">The value to wrap. Can be <c>null</c>.</param>
            <param name="configuration">The configuration to use. Can be <c>null</c>.</param>
            <returns>A response wrapping <paramref name="value"/> with <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
            <summary>
            Adds the given <paramref name="resource"/> to a list of resources that will be disposed by a host once
            the <paramref name="request"/> is disposed.
            </summary>
            <param name="request">The request controlling the lifecycle of <paramref name="resource"/>.</param>
            <param name="resource">The resource to dispose when <paramref name="request"/> is being disposed. Can be <c>null</c>.</param>
        </member>
        <member name="M:System.Web.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
            <summary>
            Disposes of all tracked resources associated with the <paramref name="request"/> which were added via the
            <see cref="M:System.Web.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)"/> method.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="T:System.Web.Http.HttpServer">
            <summary>
            Defines an implementation of an <see cref="T:System.Net.Http.HttpMessageHandler"/> which dispatches an 
            incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> and creates an <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with default configuration and dispatcher.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with default dispatcher.
            </summary>
            <param name="configuration">The <see cref="T:System.Web.Http.HttpConfiguration"/> used to configure this <see cref="T:System.Web.Http.HttpServer"/> instance.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.Dispatcher.HttpControllerDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class with a custom dispatcher.
            </summary>
            <param name="dispatcher">Http dispatcher responsible for handling incoming requests.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpServer"/> class.
            </summary>
            <param name="configuration">The <see cref="T:System.Web.Http.HttpConfiguration"/> used to configure this <see cref="T:System.Web.Http.HttpServer"/> instance.</param>
            <param name="dispatcher">Http dispatcher responsible for handling incoming requests.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged SRResources.</param>
        </member>
        <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The request to dispatch</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation.</returns>
        </member>
        <member name="M:System.Web.Http.HttpServer.Initialize">
            <summary>
            Prepares the server for operation.
            </summary>
            <remarks>
            This method must be called after all configuration is complete
            but before the first request is processed.
            </remarks>
        </member>
        <member name="P:System.Web.Http.HttpServer.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpServer.Configuration">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Implementation of <see cref="T:System.Web.Http.Controllers.IActionValueBinder"/>, Primary entry point for binding parameters for an action.
            </summary>           
        </member>
        <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.EnsureOneBodyParameter(System.Web.Http.Controllers.HttpActionBinding)">
            <summary>
            Update actionBinding to enforce there is at most 1 body parameter. 
            If there are multiple, convert them all to <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding"/>
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
            <summary>
            Selects the action.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <returns>The selected action.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
            <summary>
            Returns a map, keyed by action string, of all <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/> that the selector can select. 
            This is primarily called by <see cref="T:System.Web.Http.Description.IApiExplorer"/> to discover all the possible actions in the controller.
            </summary>
            <param name="controllerDescriptor">The controller descriptor.</param>
            <returns>A map of <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/> that the selector can select, or null if the selector does not have a well-defined mapping of <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
            <summary>
            This <see cref="T:System.Web.Http.Filters.IFilterProvider"/> implementation retrieves <see cref="T:System.Web.Http.Filters.FilterInfo">filters</see> associated with an <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>
            instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
            <summary>
            Returns the collection of filters associated with <paramref name="actionDescriptor"/>.
            </summary>
            <remarks>
            The implementation invokes <see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters"/> and <see cref="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters"/>.
            </remarks>
            <param name="configuration">The configuration. This value is not used.</param>
            <param name="actionDescriptor">The action descriptor.</param>
            <returns>A collection of filters.</returns>
        </member>
        <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
            <summary>
            This class is an <see cref="T:System.Web.Http.ModelBinding.IModelBinder"/> that delegates to one of a collection of
            <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider"/> instances.
            </summary>
            <remarks>
            If no binder is available and the <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/> allows it,
            this class tries to find a binder using an empty prefix.
            </remarks>
        </member>
        <member name="T:System.Web.Http.ModelBinding.IModelBinder">
            <summary>
            Interface for model binding.
            </summary>
        </member>
        <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
            <summary>
            Maps the specified route template.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
            <summary>
            Maps the specified route template and sets default constraints.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
            <summary>
            Maps the specified route template and sets default route values and constraints.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="T:System.Web.Http.Query.QueryValidator">
            <summary>
            This class is used to do validation on the query generated by the ODataQueryDeserializer. The default implementation 
            validates that the query is not accessing members hidden through attributes like <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"/>, <see cref="T:System.Runtime.Serialization.IgnoreDataMemberAttribute"/> and 
            <c ref="NonSerializedAttribute"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.RouteParameter">
            <summary>
            The <see cref="T:System.Web.Http.RouteParameter"/> class can be used to indicate properties about a route parameter (the literals and placeholders 
            located within segments of a <see cref="M:IHttpRoute.RouteTemplate"/>). 
            It can for example be used to indicate that a route parameter is optional.
            </summary>
        </member>
        <member name="F:System.Web.Http.RouteParameter.Optional">
            <summary>
            Optional Parameter
            </summary>
        </member>
        <member name="M:System.Web.Http.RouteParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:System.Web.Http.Routing.BoundRouteTemplate">
            <summary>
            Represents a URI generated from a <see cref="T:System.Web.Http.Routing.HttpParsedRoute"/>. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Routing.IHttpRoute">
            <summary>
            <see cref="T:System.Web.Http.Routing.IHttpRoute"/> defines the interface for a route expressing how to map an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to a particular controller
            and action.
            </summary>
        </member>
        <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine whether this route is a match for the incoming request by looking up the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for the route.
            </summary>
            <param name="virtualPathRoot">The virtual path root.</param>
            <param name="request">The request.</param>
            <returns>The <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for a route if matches; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Compute a URI based on the route and the values provided.
            </summary>
            <param name="controllerContext">The controller context.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
            <summary>
            Gets the route template describing the URI pattern to match against. 
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
            <summary>
            Gets the default values for route parameters if not provided by the incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
            <summary>
            Gets the constraints for the route parameters.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
            <summary>
            Gets any additional data tokens not used directly to determine whether a route matches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Routing.HttpRoute">
            <summary>
            Route class for self-host (i.e. hosted outside of ASP.NET). This class is mostly the
            same as the System.Web.Routing.Route implementation.
            This class has the same URL matching functionality as System.Web.Routing.Route. However,
            in order for this route to match when generating URLs, a special "httproute" key must be
            specified when generating the URL.
            </summary>
        </member>
        <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
            <summary>
            Key used to signify that a route URL generation request should include HTTP routes (e.g. Web API).
            If this key is not specified then no HTTP routes will match.
            </summary>
        </member>
        <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Attempt to generate a URI that represents the values passed in based on current
            values from the <see cref="T:System.Web.Http.Routing.HttpRouteData"/> and new values using the specified <see cref="T:System.Web.Http.Routing.HttpRoute"/>.
            </summary>
            <param name="controllerContext">The HTTP execution context.</param>
            <param name="values">The route values.</param>
            <returns>A <see cref="T:System.Web.Http.Routing.HttpVirtualPathData"/> instance or null if URI cannot be generated.</returns>
        </member>
        <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
            <summary>
            Extensions for adding <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> items to a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Net.Http.HttpRequestMessage"/> whose <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> contains a URL Parameter {ext}
            with the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> to associate with.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)">
            <summary>
            Updates the given <paramref name="formatter"/>'s set of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping"/> elements
            so that it associates the <paramref name="mediaType"/> with <see cref="T:System.Net.Http.HttpRequestMessage"/> whose <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> contains a URL Parameter {ext}
            with the given <paramref name="uriPathExtension"/>.
            </summary>
            <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> to receive the new <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> item.</param>
            <param name="uriPathExtension">The string of the <see cref="T:System.Uri"/> path extension.</param>
            <param name="mediaType">The string media type to associate with.</param>
        </member>
        <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
            <summary>
            Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/>'s from path extension appearing in <see cref="T:System.Web.Http.Routing.IHttpRouteData"/>.
            It uses the value of the {ext} URL parameter from <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> for a match.
            </summary>
            <example>
            This sample shows how to use the UriPathExtensionMapping to map urls ending with ".json" to "application/json"
            <code>
            config.Routes.MapHttpRoute("Default", "{controller}");
            config.Routes.MapHttpRoute("DefaultWithExt", "{controller}.{ext}");
            config.Formatters.JsonFormatter.AddUriPathExtensionMapping("json", "application/json");
            </code>
            </example>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The media type that will be returned if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/> class.
            </summary>
            <param name="uriPathExtension">The extension corresponding to <paramref name="mediaType"/>.
            This value should not include a dot or wildcards.</param>
            <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> that will be returned if <paramref name="uriPathExtension"/> is matched.</param>
        </member>
        <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a value indicating whether this <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping"/>
            instance can provide a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue"/> for the given <paramref name="request"/>.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to check.</param>
            <returns>If this <paramref name="request"/>'s route data contains a match for <see cref="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension"/>
            it returns <c>1.0</c> otherwise <c>0.0</c>.</returns>
        </member>
        <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
            <summary>
            Gets the <see cref="T:System.Uri"/> path extension.
            </summary>
        </member>
        <member name="P:System.Web.Http.Routing.UrlHelper.ControllerContext">
            <summary>
            Gets the <see cref="T:System.Web.Http.Controllers.HttpControllerContext"/> of the current <see cref="T:System.Web.Http.ApiController"/>.
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="M:System.Web.Http.Services.IDependencyResolver.GetService(System.Type)">
            <summary>
            Try to get a service of the given type.
            </summary>
            <param name="serviceType">Type of service to request.</param>
            <returns>an instance of the service, or null if the service is not found</returns>
        </member>
        <member name="M:System.Web.Http.Services.IDependencyResolver.GetServices(System.Type)">
            <summary>
            Try to get a list of services of the given type.
            </summary>
            <param name="serviceType">Type of services to request.</param>
            <returns>an enumeration (possibly empty) of the service. 
            Return an empty enumeration is the service is not found (don't return null)</returns>
        </member>
        <member name="T:System.Web.Http.Dispatcher.HttpControllerTypeCache">
            <summary>
            Manages a cache of <see cref="T:System.Web.Http.Controllers.IHttpController"/> types detected in the system.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
            <summary>
            Default <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector"/> instance for choosing a <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> given a <see cref="T:System.Net.Http.HttpRequestMessage"/>
            A different implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
            <summary>
            Defines the methods that are required for an <see cref="T:System.Web.Http.Controllers.IHttpController"/> factory.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
            <summary>
            Selects a <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> for the given <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <param name="request">The request message.</param>
            <returns>An <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instance.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
            <summary>
            Returns a map, keyed by controller string, of all <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> that the selector can select. 
            This is primarily called by <see cref="T:System.Web.Http.Description.IApiExplorer"/> to discover all the possible controllers in the system.
            </summary>
            <returns>A map of all <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> that the selector can select, or null if the selector does not have a well-defined mapping of <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver"/> with no external dependencies.
            </summary>
        </member>
        <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
            <summary>
            Provides an abstraction for managing the controller types of an application. A different
            implementation can be registered via the <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
            <summary>
            Creates a new <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver"/> instance using a predicate to filter controller types.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of controllers.</returns>
        </member>
        <member name="T:System.Web.Http.DependencyResolverExtensions">
            <summary>
            This provides a centralized list of type-safe accessors describing where and how we use the dependency resolver.
            This also provides a single entry point for each service request. That makes it easy 
            to see which parts of the code use it, and provides a single place to comment usage.
            Accessors encapsulate usage like:
            <list type="bullet">
            <item>Type-safe using {T} instead of unsafe <see cref="T:System.Type"/>.</item>
            <item>which type do we key off? This is interesting with type hierarchies.</item> 
            <item>do we ask for singular or plural?</item>
            <item>is it optional or mandatory?</item>
            <item>what are the ordering semantics</item>
            <item>Do we use a cached value or not?</item>     
            </list>
            Expected that any <see cref="T:System.Collections.Generic.IEnumerable`1"/> we return is non-null, although possibly empty.
            </summary>
        </member>
        <member name="M:System.Web.Http.DependencyResolverExtensions.GetValueProviderFactories(System.Web.Http.Services.DependencyResolver)">
            <summary>
            Get ValueProviderFactories. The order of returned providers is the priority order that we search the factories. 
            </summary>
        </member>
        <member name="M:System.Web.Http.DependencyResolverExtensions.GetHttpControllerSelector(System.Web.Http.Services.DependencyResolver)">
            <summary>
            Get a controller selector, which selects an <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> given an <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.DependencyResolverExtensions.GetHttpControllerActivator(System.Web.Http.Services.DependencyResolver)">
            <summary>
            Controller activator is used to instantiate an <see cref="T:System.Web.Http.Controllers.IHttpController"/>. 
            </summary>
            <returns>
            An <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/> instance or null if none are registered.
            </returns>
        </member>
        <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
            <summary>
            Provides common keys for properties stored in the <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
            <summary>
            Provides a key for the <see cref="T:System.Web.Http.HttpConfiguration"/> associated with this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
            <summary>
            Provides a key for the <see cref="T:System.Web.Http.Routing.IHttpRouteData"/> associated with this request.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
            <summary>
            Provides a key for the current <see cref="T:System.Threading.SynchronizationContext"/> stored in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>.
            If <see cref="P:System.Threading.SynchronizationContext.Current"/> is <c>null</c> then no context is stored.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
            <summary>
            Provides a key for the collection of resources that should be disposed when a request is disposed.
            </summary>
        </member>
        <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
            <summary>
            Provides a key for the <see cref="T:System.Guid"/> stored in <see cref="P:System.Net.Http.HttpRequestMessage.Properties"/>.
            This is the correlation id for that request.
            </summary>
        </member>
        <member name="T:System.Web.Http.Hosting.HttpPipelineFactory">
            <summary>
            Initializing a <see cref="T:System.Net.Http.DelegatingHandler"/> pipeline.
            </summary>
        </member>
        <member name="M:System.Web.Http.Hosting.HttpPipelineFactory.Create(System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler},System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates an instance of an <see cref="T:System.Net.Http.HttpMessageHandler"/> using the <see cref="T:System.Net.Http.DelegatingHandler"/> instances
            provided by <paramref name="handlers"/>.
            </summary>
            <param name="handlers">An ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as an 
            <see cref="T:System.Net.Http.HttpRequestMessage"/> travels up the stack and an <see cref="T:System.Net.Http.HttpResponseMessage"/> travels down.</param>
            <param name="innerChannel">The inner channel represents the destination of the HTTP message channel.</param>
            <returns>The HTTP message channel.</returns>
        </member>
        <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to an <see cref="T:System.Web.Http.Controllers.IHttpController"/> implementation for processing.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher"/> class using default <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged SRResources.</param>
        </member>
        <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Dispatches an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/> to an <see cref="T:System.Web.Http.Controllers.IHttpController"/>.
            </summary>
            <param name="request">The request to dispatch</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation.</returns>
        </member>
        <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Internal.TypeHelper">
            <summary>
            A static class that provides various <see cref="T:System.Type"/> related helpers.
            </summary>
        </member>
        <member name="M:System.Web.Http.Internal.TypeHelper.OfType``1(System.Object[])">
            <summary>
            Fast implementation to get the subset of a given type.
            </summary>
            <typeparam name="T">type to search for</typeparam>
            <returns>subset of objects that can be assigned to T</returns>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Gets the <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> instance for a given <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
            <param name="actionContext">The context.</param>
            <returns>An <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> instance.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Gets the collection of registered <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> instances.
            </summary>
            <param name="actionContext">The context.</param>
            <returns>A collection of <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> instances.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)">
            <summary>
            Gets the collection of registered <see cref="T:System.Web.Http.Validation.ModelValidator"/> instances.
            </summary>
            <param name="actionContext">The context.</param>
            <param name="metadata">The metadata.</param>
            <returns>A collection of registered <see cref="T:System.Web.Http.Validation.ModelValidator"/> instances.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryGetBinder(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.ModelBinding.IModelBinder@)">
            <summary>
            Gets the <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/> for this <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
            <param name="actionContext">The action context.</param>
            <param name="bindingContext">The binding context.</param>
            <param name="binder">When this method returns, the value associated with the specified binding context, if the context is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/> was present; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetBinder(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Gets the <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/> for this <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
            <param name="actionContext">The execution context.</param>
            <param name="bindingContext">The binding context.</param>
            <returns>The <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/>.</returns>
        </member>
        <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
            <summary>
            Reflection based action selector. 
            We optimize for the case where we have an <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector"/> instance per <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>
            instance but can support cases where there are many <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/> instances for one 
            <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector"/> as well. In the latter case the lookup is slightly slower because it goes through
            the <see cref="P:HttpControllerDescriptor.Properties"/> dictionary.
            </summary>
        </member>
        <member name="T:System.Web.Http.Services.DefaultServiceResolver">
            <summary>
            This class is what <see cref="T:System.Web.Http.Services.DependencyResolver"/> will ultimately fall back to. 
            It handles built-in dependencies that the runtime expects to be present. 
            </summary>
        </member>
        <member name="F:System.Web.Http.Metadata.ModelMetadata._additionalValues">
            <summary>
            Explicit backing store for the things we want initialized by default, so don't have to call
            the protected virtual setters of an auto-generated property.
            </summary>
        </member>
        <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
            <summary>
            Specify this parameter uses a model binder. This can optionally specify the specific model binder and 
            value providers that drive that model binder. 
            Derived attributes may provide convenience settings for the model binder or value provider. 
            </summary>
        </member>
        <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
            <summary>
            Value providers that will be fed to the model binder.
            </summary>
        </member>
        <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
            <summary>
            Sets the type of the model binder. 
            This type must be a subclass of <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider"/>        
            If null, uses the default from the configuration.
            </summary>   
        </member>
        <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
            <summary>
            Gets or sets the name to consider as the parameter name during model binding
            </summary>
        </member>
        <member name="T:System.Web.Http.Controllers.HttpControllerContext">
            <summary>
            Contains information for a single HTTP operation.
            </summary>
        </member>
        <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.Controllers.HttpControllerContext"/> class.
            </summary>
            <remarks>The default constructor is intended for use by unit testing only.</remarks>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
            <summary>
            Gets or sets the controller descriptor.
            </summary>
            <value>
            The controller descriptor.
            </value>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
            <summary>
            Gets or sets the HTTP controller.
            </summary>
            <value>
            The HTTP controller.
            </value>
        </member>
        <member name="P:System.Web.Http.Controllers.HttpControllerContext.Url">
            <summary>
            Returns an instance of a UrlHelper, which is used to generate URLs to other APIs.
            </summary>
        </member>
        <member name="T:System.Web.Http.Properties.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionExecutor_UnexpectedTaskInstance">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; on type &apos;{1}&apos; returned a Task instance even though it is not an asynchronous method..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionExecutor_WrappedTaskInstance">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; on type &apos;{1}&apos; returned an instance of &apos;{2}&apos;. Make sure to call Unwrap on the returned value to avoid unobserved faulted Task..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionFilterAttribute_MustSupplyResponseOrException">
            <summary>
              Looks up a localized string similar to After calling {0}.OnActionExecuted, the HttpActionExecutedContext properties Result and Exception were both null. At least one of these values must be non-null. To provide a new response, please set the Result object; to indicate an error, please throw an exception..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ActionSelector_AmbiguousMatchType">
            <summary>
              Looks up a localized string similar to {0} on type {1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.AmbiguousMethodInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of method &apos;{0}&apos; in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_ActionNameNotFound">
            <summary>
              Looks up a localized string similar to No action was found on the controller &apos;{0}&apos; that matches the name &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_ActionNotFound">
            <summary>
              Looks up a localized string similar to No action was found on the controller &apos;{0}&apos; that matches the request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_AmbiguousMatch">
            <summary>
              Looks up a localized string similar to Multiple actions were found that match the request: {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiControllerActionSelector_HttpMethodNotSupported">
            <summary>
              Looks up a localized string similar to The requested resource does not support http method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ApiExplorer_DefaultDocumentation">
            <summary>
              Looks up a localized string similar to Documentation for &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.CannotSupportSingletonInstance">
            <summary>
              Looks up a localized string similar to Cannot reuse an &apos;{0}&apos; instance. &apos;{0}&apos; has to be constructed per incoming message. Check your custom &apos;{1}&apos; and make sure that it will not manufacture the same instance..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.CloseParenOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.CloseParenOrOperatorExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or operator expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Common_PropertyNotFound">
            <summary>
              Looks up a localized string similar to The property {0}.{1} could not be found..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Common_TypeMustDriveFromType">
            <summary>
              Looks up a localized string similar to The type {0} must derive from {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Common_TypeMustImplementInterface">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not implement the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelMetadataProvider_UnknownProperty">
            <summary>
              Looks up a localized string similar to {0} has a DisplayColumn attribute for {1}, but property {1} does not exist..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelMetadataProvider_UnreadableProperty">
            <summary>
              Looks up a localized string similar to {0} has a DisplayColumn attribute for {1}, but property {1} does not have a public getter..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelValidatorProvider_ConstructorRequirements">
            <summary>
              Looks up a localized string similar to The type {0} must have a public constructor which accepts three parameters of types {1}, {2}, and {3}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DataAnnotationsModelValidatorProvider_ValidatableConstructorRequirements">
            <summary>
              Looks up a localized string similar to The type {0} must have a public constructor which accepts two parameters of types {1} and {2}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ControllerNameAmbiguous_WithRouteTemplate">
             <summary>
               Looks up a localized string similar to Multiple types were found that match the controller named &apos;{0}&apos;. This can happen if the route that services this request (&apos;{1}&apos;) found multiple controllers defined with the same name but differing namespaces, which is not supported.
            
            The request for &apos;{0}&apos; has found the following matching controllers:{2}.
             </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ControllerNameNotFound">
            <summary>
              Looks up a localized string similar to No type was found that matches the controller named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DefaultControllerFactory_ErrorCreatingController">
            <summary>
              Looks up a localized string similar to An error occurred when trying to create a controller of type &apos;{0}&apos;. Make sure that the controller has a parameterless public constructor..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DelegatingHandlerArrayContainsNullItem">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; list is invalid because it contains one or more null items..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DelegatingHandlerArrayHasNonNullInnerHandler">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; list is invalid because the property &apos;{1}&apos; of &apos;{2}&apos; is not null..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DependencyResolver_DoesNotImplementICommonServiceLocator">
            <summary>
              Looks up a localized string similar to The type {0} does not appear to implement Microsoft.Practices.ServiceLocation.IServiceLocator..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DependencyResolverNoService">
            <summary>
              Looks up a localized string similar to No service registered for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DigitExpected">
            <summary>
              Looks up a localized string similar to Digit expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.DuplicateIdentifier">
            <summary>
              Looks up a localized string similar to The identifier &apos;{0}&apos; was defined more than once.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expression expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ExpressionTypeMismatch">
            <summary>
              Looks up a localized string similar to Expression of type &apos;{0}&apos; expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an open generic type..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.GenericModelBinderProvider_TypeArgumentCountMismatch">
            <summary>
              Looks up a localized string similar to The open model type &apos;{0}&apos; has {1} generic type argument(s), but the open binder type &apos;{2}&apos; has {3} generic type argument(s). The binder type must not be an open generic type or must have the same number of generic arguments as the open model type..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpActionDescriptor_NoConverterForGenericParamterTypeExists">
            <summary>
              Looks up a localized string similar to No action result converter could be constructed for a generic parameter type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpMessageHandlerDisposed">
            <summary>
              Looks up a localized string similar to This &apos;{0}&apos; instance has been disposed and can no longer accept HTTP requests..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpRequestMessageExtensions_NoConfiguration">
            <summary>
              Looks up a localized string similar to The request does not have an associated configuration object or the provided configuration was null..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpRequestMessageExtensions_NoContentNegotiator">
            <summary>
              Looks up a localized string similar to The provided configuration does not have an instance of the &apos;{0}&apos; service registered..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.HttpResponseExceptionMessage">
            <summary>
              Looks up a localized string similar to Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the &apos;Response&apos; property of this exception for details..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.IdentifierExpected">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InaccessiblePropertyOrField">
            <summary>
              Looks up a localized string similar to The property or field &apos;{0}&apos; in type &apos;{1}&apos; is not accessible..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.IncompatibleOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidCharacter">
            <summary>
              Looks up a localized string similar to Syntax error &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidHexLiteral">
            <summary>
              Looks up a localized string similar to Invalid hexadecimal literal..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidIntegerLiteral">
            <summary>
              Looks up a localized string similar to Invalid integer literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidQueryOperator">
            <summary>
              Looks up a localized string similar to Invalid query operator &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidRealLiteral">
            <summary>
              Looks up a localized string similar to Invalid real literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.InvalidTypeCreationExpression">
            <summary>
              Looks up a localized string similar to Invalid &apos;{0}&apos; type creation expression..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.JQuerySyntaxMissingClosingBracket">
            <summary>
              Looks up a localized string similar to The key is invalid JQuery syntax because it is missing a closing bracket.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.MethodIsVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; in type &apos;{1}&apos; does not return a value.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.MissingRequiredMember">
            <summary>
              Looks up a localized string similar to The {0} property is required..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderConfig_ValueInvalid">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderConfig_ValueRequired">
            <summary>
              Looks up a localized string similar to A value is required..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderProviderCollection_BinderForTypeNotFound">
            <summary>
              Looks up a localized string similar to A binder for type {0} could not be located..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderProviderCollection_InvalidBinderType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not subclass {1} or implement the interface {2}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelCannotBeNull">
            <summary>
              Looks up a localized string similar to The binding context has a null Model, but this binder requires a non-null model of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelInstanceIsWrong">
            <summary>
              Looks up a localized string similar to The binding context has a Model of type &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelMetadataCannotBeNull">
            <summary>
              Looks up a localized string similar to The binding context cannot have a null ModelMetadata..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBinderUtil_ModelTypeIsWrong">
            <summary>
              Looks up a localized string similar to The binding context has a ModelType of &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ModelBindingContext_ModelMetadataMustBeSet">
            <summary>
              Looks up a localized string similar to The ModelMetadata property must be set before accessing this property..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.NoApplicableMethod">
            <summary>
              Looks up a localized string similar to No applicable method &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.OpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingCantHaveMultipleBodyParameters">
            <summary>
              Looks up a localized string similar to Can&apos;t bind multiple parameters (&apos;{0}&apos; and &apos;{1}&apos;) to the request&apos;s content..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingConflictingAttributes">
            <summary>
              Looks up a localized string similar to Can&apos;t bind parameter &apos;{0}&apos; because it has conflicting attributes on it..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParameterBindingIllegalType">
            <summary>
              Looks up a localized string similar to Can&apos;t bind parameter &apos;{1}&apos;. Must specify a custom model binder to bind parameters of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParseErrorInClause">
            <summary>
              Looks up a localized string similar to Parse error in {0}. {1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ParseExceptionFormat">
            <summary>
              Looks up a localized string similar to {0} (at index {1}).
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.PositiveIntegerExpectedForODataQueryParameter">
            <summary>
              Looks up a localized string similar to The OData query parameter &apos;{0}&apos; has an invalid value. The value should be a positive integer. The provided value was &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.QueryableAttribute_InvalidResultLimit">
            <summary>
              Looks up a localized string similar to The value of the ResultLimit property on the Queryable filter applied to action &apos;{0}&apos; on controller &apos;{1}&apos; must be greater than or equal to 0..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to The parameters dictionary contains a null entry for parameter &apos;{0}&apos; of non-nullable type &apos;{1}&apos; for method &apos;{2}&apos; in &apos;{3}&apos;. An optional parameter must be a reference type, a nullable type, or be declared as an optional parameter..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterNotInDictionary">
            <summary>
              Looks up a localized string similar to The parameters dictionary does not contain an entry for parameter &apos;{0}&apos; of type &apos;{1}&apos; for method &apos;{2}&apos; in &apos;{3}&apos;. The dictionary must contain an entry for each parameter, including parameters that have null values..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedActionDescriptor_ParameterValueHasWrongType">
            <summary>
              Looks up a localized string similar to The parameters dictionary contains an invalid entry for parameter &apos;{0}&apos; for method &apos;{1}&apos; in &apos;{2}&apos;. The dictionary contains a value of type &apos;{3}&apos;, but the parameter requires a value of type &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ReflectedHttpActionDescriptor_CannotCallOpenGenericMethods">
            <summary>
              Looks up a localized string similar to Cannot call action method &apos;{0}&apos; on controller &apos;{1}&apos; because the action method is a generic method..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ResponseMessageResultConverter_NullHttpResponseMessage">
            <summary>
              Looks up a localized string similar to A null value was returned where an instance of HttpResponseMessage was expected..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_AddRemoveWithNoKeyNotSupported">
            <summary>
              Looks up a localized string similar to Adding or removing items from a &apos;{0}&apos; is not supported. Please use a key when adding and removing items..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveCatchAllInMultiSegment">
            <summary>
              Looks up a localized string similar to A path segment that contains more than one section, such as a literal section or a parameter, cannot contain a catch-all parameter..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveConsecutiveParameters">
            <summary>
              Looks up a localized string similar to A path segment cannot contain two consecutive parameters. They must be separated by a &apos;/&apos; or by a literal string..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CannotHaveConsecutiveSeparators">
            <summary>
              Looks up a localized string similar to The route template separator character &apos;/&apos; cannot appear consecutively. It must be separated by either a parameter or a literal value..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_CatchAllMustBeLast">
            <summary>
              Looks up a localized string similar to A catch-all parameter can only appear as the last segment of the route template..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_InvalidParameterName">
            <summary>
              Looks up a localized string similar to The route parameter name &apos;{0}&apos; is invalid. Route parameter names must be non-empty and cannot contain these characters: &quot;{{&quot;, &quot;}}&quot;, &quot;/&quot;, &quot;?&quot;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_InvalidRouteTemplate">
            <summary>
              Looks up a localized string similar to The route template cannot start with a &apos;/&apos; or &apos;~&apos; character and it cannot contain a &apos;?&apos; character..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_MismatchedParameter">
            <summary>
              Looks up a localized string similar to There is an incomplete parameter in this path segment: &apos;{0}&apos;. Check that each &apos;{{&apos; character has a matching &apos;}}&apos; character..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_RepeatedParameter">
            <summary>
              Looks up a localized string similar to The route parameter name &apos;{0}&apos; appears more than one time in the route template..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Route_ValidationMustBeStringOrCustomConstraint">
            <summary>
              Looks up a localized string similar to The constraint entry &apos;{0}&apos; on the route with route template &apos;{1}&apos; must have a string value or be of a type which implements &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.RouteCollection_NameNotFound">
            <summary>
              Looks up a localized string similar to A route named &apos;{0}&apos; could not be found in the route collection..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionFilterMessage">
            <summary>
              Looks up a localized string similar to Action filter for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionInvokeMessage">
            <summary>
              Looks up a localized string similar to Action=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionReturnValue">
            <summary>
              Looks up a localized string similar to Action returned &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceActionSelectedMessage">
            <summary>
              Looks up a localized string similar to Selected action &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceBeginParameterBind">
            <summary>
              Looks up a localized string similar to Binding parameter &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceCancelledMessage">
            <summary>
              Looks up a localized string similar to Cancelled.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceEndParameterBind">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; bound to the value &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceEndParameterBindNoBind">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; failed to bind..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterEndMessage">
            <summary>
              Looks up a localized string similar to Will use same &apos;{0}&apos; formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterEndMessageNew">
            <summary>
              Looks up a localized string similar to Will use new &apos;{0}&apos; formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestFormatterMessage">
            <summary>
              Looks up a localized string similar to Obtaining formatter of type &apos;{0}&apos; for type=&apos;{1}&apos;, mediaType=&apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceGetPerRequestNullFormatterEndMessage">
            <summary>
              Looks up a localized string similar to Null formatter.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceInvokingAction">
            <summary>
              Looks up a localized string similar to Invoking action &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceModelStateErrorMessage">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceModelStateInvalidMessage">
            <summary>
              Looks up a localized string similar to Model state is invalid. {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceNegotiateFormatter">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, formatters=[{1}].
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceNoneObjectMessage">
            <summary>
              Looks up a localized string similar to none.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceReadFromStreamMessage">
            <summary>
              Looks up a localized string similar to Type=&apos;{0}&apos;, content-type=&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceReadFromStreamValueMessage">
            <summary>
              Looks up a localized string similar to Value read=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceRequestCompleteMessage">
            <summary>
              Looks up a localized string similar to Content-type=&apos;{0}&apos;, content-length={1}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceRouteMessage">
            <summary>
              Looks up a localized string similar to Route=&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceSelectedFormatter">
            <summary>
              Looks up a localized string similar to Selected formatter=&apos;{0}&apos;, content-type=&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceUnknownMessage">
            <summary>
              Looks up a localized string similar to unknown.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceValidModelState">
            <summary>
              Looks up a localized string similar to Model state is valid. Values: {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.TraceWriteToStreamMessage">
            <summary>
              Looks up a localized string similar to Value=&apos;{0}&apos;, type=&apos;{1}&apos;, content-type=&apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.UnknownIdentifier">
            <summary>
              Looks up a localized string similar to Unknown identifier &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.UnknownPropertyOrField">
            <summary>
              Looks up a localized string similar to No property or field &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.UnterminatedStringLiteral">
            <summary>
              Looks up a localized string similar to Unterminated string literal.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.UriQueryStringInvalid">
            <summary>
              Looks up a localized string similar to The query specified in the URI is not valid. {0}.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValidatableObjectAdapter_IncompatibleType">
            <summary>
              Looks up a localized string similar to The model object inside the metadata claimed to be compatible with {0}, but was actually {1}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.Validation_ValueNotFound">
            <summary>
              Looks up a localized string similar to A value is required but was not present in the request..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderFactory_Cannot_Create">
            <summary>
              Looks up a localized string similar to Could not create a &apos;{0}&apos; from &apos;{1}&apos;. Please ensure it derives from &apos;{0}&apos; and has a public parameterless constructor..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderResult_ConversionThrew">
            <summary>
              Looks up a localized string similar to The parameter conversion from type &apos;{0}&apos; to type &apos;{1}&apos; failed. See the inner exception for more information..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.SRResources.ValueProviderResult_NoConverterExists">
            <summary>
              Looks up a localized string similar to The parameter conversion from type &apos;{0}&apos; to type &apos;{1}&apos; failed because no type converter can convert between these types..
            </summary>
        </member>
        <member name="M:System.Web.Http.Tracing.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieves the <see cref="T:System.Guid"/> which has been assigned as the
            correlation id associated with the given <paramref name="request"/>.
            The value will be created and set the first time this method is called.
            </summary>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The <see cref="T:System.Guid"/> associated with that request.</returns>
        </member>
        <member name="T:System.Web.Http.Tracing.IFormatterTracer">
            <summary>
            Interface used to mark <see cref="T:System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer"/> classes.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.IFormatterTracer.Request">
            <summary>
            Gets the associated <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.IFormatterTracer.InnerFormatter">
            <summary>
            Gets the inner <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> this tracer is monitoring.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceManager">
            <summary>
            Interface to initialize the tracing layer.
            </summary>
            <remarks>
            This is an extensibility interface that may be inserted into the
            <see cref="T:System.Web.Http.Services.DependencyResolver"/> to provide a replacement for the
            entire tracing layer.
            </remarks>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceWriter">
            <summary>
            Interface to write <see cref="T:System.Web.Http.Tracing.TraceRecord"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriter.IsEnabled(System.String,System.Web.Http.Tracing.TraceLevel)">
            <summary>
            Determines whether tracing is currently enabled for the given <paramref name="category"/>
            and <paramref name="level"/>.
            </summary>
            <param name="category">The trace category.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/></param>
            <returns>Returns <c>true</c> if tracing is currently enabled for the category and level,
            otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Invokes the specified <paramref name="traceAction"/> to allow setting values in
            a new <see cref="T:System.Web.Http.Tracing.TraceRecord"/> if and only if tracing is permitted at the given
            <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <remarks>
            If tracing is permitted at the given category and level, the <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>
            will construct a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> and invoke the caller's action to allow
            it to set values in the <see cref="T:System.Web.Http.Tracing.TraceRecord"/> provided to it.   
            When the caller's action returns, the <see cref="T:System.Web.Http.Tracing.TraceRecord"/>
            will be recorded.   If tracing is not enabled, <paramref name="traceAction"/> will not be called.
            </remarks>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/>.  
            It may be <c>null</c> but doing so will prevent subsequent trace analysis 
            from correlating the trace to a particular request.</param>
            <param name="category">The logical category for the trace.  Users can define their own.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> at which to write this trace.</param>
            <param name="traceAction">The action to invoke if tracing is enabled.  The caller is expected
            to fill in the fields of the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> in this action.</param>
        </member>
        <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Debug"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Error"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Fatal"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so cannot be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to trace.   It may not be null.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to trace.   It may not be null.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
            <summary>
            Writes a single <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to the given <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> if the trace writer
            is enabled for the given <paramref name="category"/> and <paramref name="level"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified operation.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performaed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Action"/> that performs the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified asynchronous operation.
            </summary>
            <remarks>The end trace will occur when the asynchronous operation completes, either success or failure.</remarks>
            <typeparam name="TResult">The type of result produced by the <see cref="T:System.Threading.Tasks.Task"/>.</typeparam>
            /// <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Func`1"/> that returns the <see cref="T:System.Threading.Tasks.Task"/> that will perform the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  The result of the completed task will also
            be passed to this action.  This action may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> returned by the operation.</returns>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
            <summary>
            Traces both a begin and an end trace around a specified asynchronous operation.
            </summary>
            <remarks>The end trace will occur when the asynchronous operation completes, either success or failure.</remarks>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/>.</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to associate the trace.  It may be null.</param>
            <param name="category">The logical category of the trace.</param>
            <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel"/> of the trace.</param>
            <param name="operatorName">The name of the object performing the operation.  It may be null.</param>
            <param name="operationName">The name of the operation being performed.  It may be null.</param>
            <param name="beginTrace">The <see cref="T:System.Action"/> to invoke prior to performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="execute">An <see cref="T:System.Func`1"/> that returns the <see cref="T:System.Threading.Tasks.Task"/> that will perform the operation.</param>
            <param name="endTrace">The <see cref="T:System.Action"/> to invoke after successfully performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <param name="errorTrace">The <see cref="T:System.Action"/> to invoke if an error was encountered performing the operation, 
            allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord"/> to be filled in.  It may be null.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> returned by the operation.</returns>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given message.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given <paramref name="exception"/>.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
        </member>
        <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a <see cref="T:System.Web.Http.Tracing.TraceRecord"/> at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> with the given message and exception.
            </summary>
            <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter"/></param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> with which to correlate the request.  
            It may be null, but if so will not be correlated with any request.</param>
            <param name="category">The category for the trace.</param>
            <param name="exception">The exception to trace</param>
            <param name="messageFormat">The string to use to format a message.  It may not be null.</param>
            <param name="messageArguments">Optional list of arguments for the <paramref name="messageFormat"/>.</param>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceCategories">
            <summary>
            Category names traced by the default tracing implementation.
            </summary>
            <remarks>
            The list of permitted category names is open-ended, and users may define their own.
            It is recommended that category names reflect the namespace of their
            respective area.  This prevents name conflicts and allows external
            logging tools to enable or disable tracing by namespace.
            </remarks>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceKind">
            <summary>
            Describes the kind of <see cref="T:System.Web.Http.Tracing.TraceRecord"/> for an individual trace operation.
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
            <summary>
            Single trace, not part of a Begin/End trace pair
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
            <summary>
            Trace marking the beginning of some operation.
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceKind.End">
            <summary>
            Trace marking the end of some operation.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceLevel">
            <summary>
            Available trace levels.
            </summary>
            <remarks>
            The interpretation of these levels is the responsibility of the
            <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> implementation.   The general convention is that
            enabling a particular trace level also enables all levels greater than or
            equal to it.  For example, tracing at <see cref="F:System.Web.Http.Tracing.TraceLevel.Warn"/> level would
            generally trace if the trace writer was enabled to trace at level <see cref="F:System.Web.Http.Tracing.TraceLevel.Info"/>.
            </remarks>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
            <summary>
            Tracing is disabled
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
            <summary>
            Trace level for debugging traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
            <summary>
            Trace level for informational traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
            <summary>
            Trace level for warning traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
            <summary>
            Trace level for error traces
            </summary>
        </member>
        <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
            <summary>
            Trace level for fatal traces
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.TraceRecord">
            <summary>
            Data object used by <see cref="T:System.Web.Http.Tracing.ITraceWriter"/> to record traces.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
            <summary>
            Gets or sets the tracing category.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
            <summary>
            Gets or sets the kind of trace.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
            <summary>
            Gets or sets the tracing level.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
            <summary>
            Gets or sets the logical operation name being performed.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
            <summary>
            Gets or sets the logical name of the object performing the operation
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
            <summary>
            Optional user-defined property bag.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
            <summary>
            Gets the correlation ID  from the <see cref="P:System.Web.Http.Tracing.TraceRecord.Request"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
            <summary>
            Gets or sets the <see cref="T:System.Net.HttpStatusCode"/> associated with the <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
            <summary>
            Gets the <see cref="T:System.DateTime"/> of this trace (via <see cref="P:System.DateTime.UtcNow"/>)
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionDescriptorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ActionFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.ActionFilterAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ActionFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IActionFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.FilterTracer">
            <summary>
            Base class and helper for the creation of filter tracers.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionInvokerTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpActionSelectorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpActionSelector"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ActionValueBinderTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IActionValueBinder"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerDescriptorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Controllers.IHttpController"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.AuthorizationFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute"/>
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.AuthorizationFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IAuthorizationFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerActivatorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpControllerSelectorTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ExceptionFilterAttributeTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.ExceptionFilterTracer">
            <summary>
            Tracer for <see cref="T:System.Web.Http.Filters.IExceptionFilter"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.ContentNegotiatorTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.IContentNegotiator"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.FormatterParameterBindingTracer">
            <summary>
            Tracer to wrap a <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding"/>.
            Its primary purpose is to intercept binding requests so that it can create tracers for the formatters.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.FormUrlEncodedMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer">
            <summary>
            Tracer to wrap an <see cref="T:System.Web.Http.Controllers.HttpParameterBinding"/>.
            Its primary purpose is to monitor <see cref="M:System.Web.Http.Tracing.Tracers.HttpParameterBindingTracer.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.JsonMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.MediaTypeFormatterTracer">
            <summary>
            Tracer to monitor <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> instances.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.MessageHandlerTracer">
            <summary>
            Tracer to wrap a <see cref="T:System.Net.Http.DelegatingHandler"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.RequestMessageHandlerTracer">
            <summary>
            Internal <see cref="T:System.Net.Http.DelegatingHandler"/> that executes before and after all of the installed message handlers.
            The begin trace of this handler is the first trace for the request.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.Tracers.XmlMediaTypeFormatterTracer">
            <summary>
            Tracer for <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/>.  
            It is required because users can select formatters by this type.
            </summary>
        </member>
        <member name="T:System.Web.Http.Tracing.FormattingUtilities">
            <summary>
            General purpose utilities to format strings used in tracing.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
            <summary>
            Recursively validate an object. 
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.IBodyModelValidator">
            <summary>
            Validates the body parameter of an action after the parameter has been read by the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
            <summary>
            Determines whether the <paramref name="model"/> is valid and adds any validation errors to the <paramref name="actionContext"/>'s <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>
            </summary>
            <param name="model">The model to be validated.</param>
            <param name="type">The <see cref="T:System.Type"/> to use for validation.</param>
            <param name="metadataProvider">The <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> used to provide the model metadata.</param>
            <param name="actionContext">The <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> within which the model is being validated.</param>
            <param name="keyPrefix">The <see cref="T:System.String"/> to append to the key for any validation errors.</param>
            <returns><c>true</c>if <paramref name="model"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
            <summary>
            Determines whether the <paramref name="model"/> is valid and adds any validation errors to the <paramref name="actionContext"/>'s <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>
            </summary>
            <param name="model">The model to be validated.</param>
            <param name="type">The <see cref="T:System.Type"/> to use for validation.</param>
            <param name="metadataProvider">The <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider"/> used to provide the model metadata.</param>
            <param name="actionContext">The <see cref="T:System.Web.Http.Controllers.HttpActionContext"/> within which the model is being validated.</param>
            <param name="keyPrefix">The <see cref="T:System.String"/> to append to the key for any validation errors.</param>
            <returns><c>true</c>if <paramref name="model"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
            <summary>
            This <see cref="T:System.Net.Http.Formatting.IFormatterLogger"/> logs formatter errors to the provided <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
            <summary>
            This <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector"/> selects required members by checking for any 
            required ModelValidators associated with the member. This is the default implementation used by
            <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
            <summary>
            An implementation of <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> which providers validators
            for attributes which derive from <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>. It also provides
            a validator for types which implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
            <summary>
            Registers an adapter type for the given <paramref name="modelType"/>, which must
            implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>. The adapter type must derive from
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> and it must contain a public constructor
            which takes two parameters of types <see cref="T:System.Web.Http.Metadata.ModelMetadata"/> and
            <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
            <summary>
            Registers an adapter factory for the given <paramref name="modelType"/>, which must
            implement <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
            <summary>
            Registers the default adapter type for objects which implement
            <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>. The adapter type must derive from
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> and it must contain a public constructor
            which takes two parameters of types <see cref="T:System.Web.Http.Metadata.ModelMetadata"/> and
            <see cref="T:System.Web.Http.Controllers.HttpActionContext"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
            <summary>
            Registers the default adapter factory for objects which implement
            <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
            <summary>
            This <see cref="T:System.Web.Http.Validation.ModelValidatorProvider"/> provides a required ModelValidator for members marked as [DataMember(IsRequired=true)].
            </summary>
        </member>
        <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
            <summary>
            <see cref="T:System.Web.Http.Validation.ModelValidator"/> for required members.
            </summary>
        </member>
        <member name="T:System.Web.Http.FromBodyAttribute">
            <summary>
            This attribute is used on action parameters to indicate
            they come only from the content body of the incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
            <summary>
            This interface is implemented by any <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/> that supports
            the creation of a <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/> to access the <see cref="T:System.Uri"/> of
            an incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
            <summary>
            This attribute is used to specify a custom <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.HttpConfiguration">
            <summary>
            Configuration of <see cref="T:System.Web.Http.HttpServer"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpConfiguration"/> class.
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpConfiguration"/> class.
            </summary>
            <param name="routes">The <see cref="T:System.Web.Http.HttpRouteCollection"/> to associate with this instance.</param>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Filters">
            <summary>
            Gets the list of filters that apply to all requests served using this HttpConfiguration instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
            <summary>
            Gets an ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as an
            <see cref="T:System.Net.Http.HttpRequestMessage"/> travels up the stack and an <see cref="T:System.Net.Http.HttpResponseMessage"/> travels down in
            stack in return. The handlers are invoked in a bottom-up fashion in the incoming path and top-down in the outgoing 
            path. That is, the last entry is called first for an incoming request message but invoked last for an outgoing 
            response message.
            </summary>
            <value>
            The message handler collection.
            </value>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Routes">
            <summary>
            Gets the <see cref="T:System.Web.Http.HttpRouteCollection"/> associated with this <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
            <value>
            The <see cref="T:System.Web.Http.HttpRouteCollection"/>.
            </value>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Properties">
            <summary>
            Gets the properties associated with this instance.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
            <summary>
            Gets the root virtual path. The <see cref="P:System.Web.Http.HttpConfiguration.VirtualPathRoot"/> property always returns 
            "/" as the first character of the returned value.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.ServiceResolver">
            <summary>
            Gets the <see cref="T:System.Web.Http.Services.DependencyResolver"/> used to resolve services to use by this <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
            <value>
            The <see cref="T:System.Web.Http.Services.DependencyResolver"/>.
            </value>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
            <summary>
            Gets or sets a value indicating whether error details should be included in error messages.
            </summary>
        </member>
        <member name="P:System.Web.Http.HttpConfiguration.Formatters">
            <summary>
            Gets the media type formatters.
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.Request">
            <summary>
            Gets the <see name="HttpRequestMessage"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.Configuration">
            <summary>
            Gets the <see name="HttpConfiguration"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.ControllerContext">
            <summary>
            Gets the <see name="HttpControllerContext"/> of the current ApiController.
            
            The setter is not intended to be used other than for unit testing purpose. 
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.ModelState">
            <summary>
            Gets model state after the model binding process. This ModelState will be empty before model binding happens.
            Please do not populate this property other than for unit testing purpose.
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.Url">
            <summary>
            Returns an instance of a UrlHelper, which is used to generate URLs to other APIs.
            </summary>
        </member>
        <member name="P:System.Web.Http.ApiController.User">
            <summary>
            Returns the current principal associated with this request.
            </summary>
        </member>
        <member name="T:System.Web.Http.ApiController.FilterGrouping">
            <summary>
            Quickly split filters into different types 
            </summary>
            <remarks>Avoid <see cref="M:ReadOnlyCollection.Select"/> because it has a very slow implementation that shows on profiles.</remarks>
        </member>
        <member name="M:System.Web.Http.Query.DynamicQueryable.ExpressionParser.ConvertEnumExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            We perform comparisons against enums using the underlying type
            because a more complete set of comparisons can be performed.
            </summary>
        </member>
        <member name="T:System.Web.Http.Query.ODataQueryDeserializer">
            <summary>
            Used to deserialize a set of string based query operations into expressions and
            compose them over a specified query.
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.ODataQueryDeserializer.Deserialize(System.Linq.IQueryable,System.Uri)">
            <summary>
            Deserializes the query operations in the specified Uri and applies them
            to the specified IQueryable.
            </summary>
            <param name="query">The root query to compose the deserialized query over.</param>
            <param name="uri">The request Uri containing the query operations.</param>
            <returns>The resulting IQueryable with the deserialized query composed over it.</returns>
        </member>
        <member name="M:System.Web.Http.Query.ODataQueryDeserializer.Deserialize``1(System.Uri)">
            <summary>
            Deserializes the query operations in the specified Uri and returns an IQueryable
            with a manufactured query root with those operations applied.
            </summary>
            <typeparam name="T">The element type of the query</typeparam>
            <param name="uri">The request Uri containing the query operations.</param>
            <returns>The resulting IQueryable with the deserialized query composed over it.</returns>
        </member>
        <member name="M:System.Web.Http.Query.ODataQueryDeserializer.Deserialize(System.Type,System.Uri)">
            <summary>
            Deserializes the query operations in the specified Uri and returns an IQueryable
            with a manufactured query root with those operations applied.
            </summary>
            <param name="elementType">The element type of the query</param>
            <param name="uri">The request Uri containing the query operations.</param>
            <returns>The resulting IQueryable with the deserialized query composed over it.</returns>
        </member>
        <member name="T:System.Web.Http.Query.QueryComposer">
            <summary>
            Used to compose two separate queries into a single query
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.QueryComposer.Compose(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Composes the specified query with the source provided.
            </summary>
            <param name="source">The root or source query</param>
            <param name="query">The query to compose</param>
            <returns>The composed query</returns>
        </member>
        <member name="T:System.Web.Http.Query.QueryComposer.QueryRebaser">
            <summary>
            Class used to insert a specified query source into another separate
            query, effectively "rebasing" the query source.
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.QueryComposer.QueryRebaser.Rebase(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Rebase the specified query to the specified source
            </summary>
            <param name="source">The query source</param>
            <param name="query">The query to rebase</param>
            <returns>Returns the edited query.</returns>
        </member>
        <member name="T:System.Web.Http.Query.QueryResolver">
            <summary>
            Defines a set of methods that can participate in query deserialization.
            </summary>
        </member>
        <member name="M:System.Web.Http.Query.QueryResolver.ResolveMember(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Called to attempt to resolve unresolved member references during query deserialization.
            </summary>
            <param name="type">The Type the member is expected on.</param>
            <param name="member">The member name.</param>
            <param name="instance">The instance to form the MemberExpression on.</param>
            <returns>A MemberExpression if the member can be resolved, null otherwise.</returns>
        </member>
        <member name="T:System.Web.Http.Query.ServiceQuery">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.Query.ServiceQuery.QueryParts">
            <summary>
            Gets or sets a list of query parts.
            </summary>
        </member>
        <member name="T:System.Web.Http.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.Properties.CommonWebApiResources.DictionaryMissingRequiredValue">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; must contain an item named &apos;{1}&apos; with a value of type &apos;{2}&apos;..
            </summary>
        </member>
    </members>
</doc>
